/**
 * Athar Claims (Post-Login)
 * namespace: https://n-athar.co/
 * - يعين الأدوار
 * - يعين الحالة trial/active/inactive (+ pending اختياري)
 * - يدفع trial 3 أيام لأول تسجيل دخول
 */
exports.onExecutePostLogin = async (event, api) => {
  const NS = "https://n-athar.co/";

  // ===== Roles/Admin from RBAC =====
  const roles = Array.isArray(event.authorization?.roles) ? event.authorization.roles : [];
  api.idToken.setCustomClaim(NS + "roles", roles);
  api.accessToken.setCustomClaim(NS + "roles", roles);

  const isAdmin = roles.includes("admin") || (event.user.app_metadata?.role === "admin");
  if (isAdmin) {
    api.idToken.setCustomClaim(NS + "admin", true);
    api.accessToken.setCustomClaim(NS + "admin", true);
  }

  // ===== حالة الاشتراك =====
  const amd = event.user.app_metadata || {};
  const now = new Date();

  let status = "inactive"; // الافتراضي

  // لو تبين تمنعين قبل توثيق الإيميل، افتحي السطرين التاليين
  // if (!event.user.email_verified) {
  //   status = "pending"; // لن يُفعَّل شيء قبل توثيق الإيميل
  // } else {

  // مدفوع = نشط
  if (amd.paid_until && new Date(amd.paid_until) > now) {
    status = "active";
  } else {
    // تجربة 3 أيام تُنشأ مرة واحدة
    if (!amd.trial_started || !amd.trial_expires) {
      const started = now.toISOString();
      const expires = new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000).toISOString();
      api.user.setAppMetadata("trial_started", started);
      api.user.setAppMetadata("trial_expires", expires);
      status = "trial";

      // 👇 حقن تواريخ التجربة في الـTokens لقراءة الواجهة لها مباشرة
      api.idToken.setCustomClaim(NS + "trial_started", started);
      api.accessToken.setCustomClaim(NS + "trial_started", started);
      api.idToken.setCustomClaim(NS + "trial_expires", expires);
      api.accessToken.setCustomClaim(NS + "trial_expires", expires);

    } else {
      const exp = new Date(amd.trial_expires);
      status = (now <= exp) ? "trial" : "inactive";

      // 👇 إن كانت التواريخ موجودة مسبقًا، نضيفها أيضًا في الـTokens
      api.idToken.setCustomClaim(NS + "trial_started", amd.trial_started);
      api.accessToken.setCustomClaim(NS + "trial_started", amd.trial_started);
      api.idToken.setCustomClaim(NS + "trial_expires", amd.trial_expires);
      api.accessToken.setCustomClaim(NS + "trial_expires", amd.trial_expires);
    }
  }
  // }  // <-- اغلاقي اختيارياً لو فعّلتِ حظر غير الموثَّق

  // نُصدر الحالة في الـ tokens
  api.idToken.setCustomClaim(NS + "status", status);
  api.accessToken.setCustomClaim(NS + "status", status);

  // ===== خطة/خصائص إضافية (اختياري) =====
  const plan = amd.plan || "free";
  api.idToken.setCustomClaim(NS + "plan", plan);
  if (amd.role)        api.idToken.setCustomClaim(NS + "role", amd.role);
  if (amd.signup_code) api.idToken.setCustomClaim(NS + "signup_code", amd.signup_code);

  // منظمة (اختياري)
  if (event.organization) {
    api.idToken.setCustomClaim(NS + "org_id",   event.organization.id);
    api.idToken.setCustomClaim(NS + "org_name", event.organization.display_name || event.organization.name);
  }

  // معلومات أساسية
  if (event.user?.email) {
    api.idToken.setCustomClaim(NS + "email", event.user.email);
  }
  const fullName = event.user?.user_metadata?.full_name || event.user?.name;
  if (fullName) {
    api.idToken.setCustomClaim(NS + "full_name", fullName);
  }
};
